# coding: utf-8

"""
    ERCOT Public API Client/Developer Documentation

    Client/Developer RESTFul web services documentation for ERCOT Market Information List (EMIL) products.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.artifact import Artifact
from openapi_client.models.link import Link
from typing import Optional, Set
from typing_extensions import Self

class Product(BaseModel):
    """
    Represents an EMIL Product, which includes its metadata along with all Artifact information.
    """ # noqa: E501
    emil_id: Optional[StrictStr] = Field(default=None, alias="emilId")
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    report_type_id: Optional[StrictInt] = Field(default=None, alias="reportTypeId")
    audience: Optional[StrictStr] = None
    generation_frequency: Optional[StrictStr] = Field(default=None, alias="generationFrequency")
    security_classification: Optional[StrictStr] = Field(default=None, alias="securityClassification")
    last_updated: Optional[datetime] = Field(default=None, alias="lastUpdated")
    first_run: Optional[datetime] = Field(default=None, alias="firstRun")
    eceii: Optional[StrictStr] = None
    channel: Optional[StrictStr] = None
    user_guide: Optional[StrictStr] = Field(default=None, alias="userGuide")
    posting_type: Optional[StrictStr] = Field(default=None, alias="postingType")
    market: Optional[StrictStr] = None
    extract_subscriber: Optional[StrictStr] = Field(default=None, alias="extractSubscriber")
    xsd_name: Optional[StrictStr] = Field(default=None, alias="xsdName")
    mis_posting_location: Optional[StrictStr] = Field(default=None, alias="misPostingLocation")
    certificate_role: Optional[StrictStr] = Field(default=None, alias="certificateRole")
    file_type: Optional[StrictStr] = Field(default=None, alias="fileType")
    ddl_name: Optional[StrictStr] = Field(default=None, alias="ddlName")
    mis_display_duration: Optional[StrictInt] = Field(default=None, alias="misDisplayDuration")
    archive_duration: Optional[StrictInt] = Field(default=None, alias="archiveDuration")
    notification_type: Optional[StrictStr] = Field(default=None, alias="notificationType")
    content_type: Optional[StrictStr] = Field(default=None, alias="contentType")
    download_limit: Optional[StrictInt] = Field(default=None, alias="downloadLimit")
    last_post_datetime: Optional[datetime] = Field(default=None, alias="lastPostDatetime")
    protocol_rules: Optional[Dict[str, StrictStr]] = Field(default=None, alias="protocolRules")
    links: Optional[List[Link]] = None
    artifacts: Optional[List[Artifact]] = None
    __properties: ClassVar[List[str]] = ["emilId", "name", "description", "status", "reportTypeId", "audience", "generationFrequency", "securityClassification", "lastUpdated", "firstRun", "eceii", "channel", "userGuide", "postingType", "market", "extractSubscriber", "xsdName", "misPostingLocation", "certificateRole", "fileType", "ddlName", "misDisplayDuration", "archiveDuration", "notificationType", "contentType", "downloadLimit", "lastPostDatetime", "protocolRules", "links", "artifacts"]

    @field_validator('content_type')
    def content_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA', 'BINARY']):
            raise ValueError("must be one of enum values ('DATA', 'BINARY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Product from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in artifacts (list)
        _items = []
        if self.artifacts:
            for _item in self.artifacts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['artifacts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Product from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "emilId": obj.get("emilId"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "status": obj.get("status"),
            "reportTypeId": obj.get("reportTypeId"),
            "audience": obj.get("audience"),
            "generationFrequency": obj.get("generationFrequency"),
            "securityClassification": obj.get("securityClassification"),
            "lastUpdated": obj.get("lastUpdated"),
            "firstRun": obj.get("firstRun"),
            "eceii": obj.get("eceii"),
            "channel": obj.get("channel"),
            "userGuide": obj.get("userGuide"),
            "postingType": obj.get("postingType"),
            "market": obj.get("market"),
            "extractSubscriber": obj.get("extractSubscriber"),
            "xsdName": obj.get("xsdName"),
            "misPostingLocation": obj.get("misPostingLocation"),
            "certificateRole": obj.get("certificateRole"),
            "fileType": obj.get("fileType"),
            "ddlName": obj.get("ddlName"),
            "misDisplayDuration": obj.get("misDisplayDuration"),
            "archiveDuration": obj.get("archiveDuration"),
            "notificationType": obj.get("notificationType"),
            "contentType": obj.get("contentType"),
            "downloadLimit": obj.get("downloadLimit"),
            "lastPostDatetime": obj.get("lastPostDatetime"),
            "protocolRules": obj.get("protocolRules"),
            "links": [Link.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "artifacts": [Artifact.from_dict(_item) for _item in obj["artifacts"]] if obj.get("artifacts") is not None else None
        })
        return _obj


